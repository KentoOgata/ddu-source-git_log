*ddu-source-git_log.txt* git log source for ddu.vim

Author: kyoh86 <me@kyoh86.dev>
License: MIT


==============================================================================
                                                 *ddu-source-git_log-contents*
Contents ~

Introduction                                 |ddu-source-git_log-introduction|
Install                                      |ddu-source-git_log-install|
Examples                                     |ddu-source-git_log-examples|
Source Params                                |ddu-source-git_log-params|
Actions                                      |ddu-kind-git_commit-actions|


==============================================================================
                                             *ddu-source-git_log-introduction*
Introduction ~

ddu.vim source collecting commit log by `git log` command.

This source generates items for a kind "git_commit".
A handler for the kind "git_commit" is included in this plugin; see 
|ddu-kind-git_commit|.

This plugin calls `git` from the |current-directory| as default.
If you want to change the path, you can use |ddu-source-option-path|.


==============================================================================
                                                  *ddu-source-git_log-install*
Install ~

It depends on "|ddu|.vim" and "|denops.vim|".

https://github.com/vim-denops/denops.vim
https://github.com/Shougo/ddu.vim


==============================================================================
                                                 *ddu-source-git_log-examples*
Examples ~

>
	call ddu#start(#{
	    \     sources: [#{
	    \         name: "git_log"
	    \     }]
	    \ } )
<

>
	" Use git_diff_tree source in the specified path.
	" Call it for the current buffer for example:
	call ddu#start(#{
	    \     sources: [#{
	    \         name: "git_log",
	    \         options: #{ path: expand("%:p") }
	    \     }]
	    \ } )
<

You can use with ddu-source-git_diff_tree to source diffs in the commit.

>
	function s:files(args)
	    call ddu#start(#{
	        \     name: args.options.name,
	        \     push: v:true,
	        \     sources: [#{
	        \         name: 'git_diff_tree',
	        \         params: #{
	        \             commitHash: args.items[0].action.hash,
	        \         }
	        \     }]
	        \ })
	endfunction

	call ddu#custom#action("kind", "git_commit", "files" s:files)
<

==============================================================================
                                                   *ddu-source-git_log-params*
Source Params ~

                                                *ddu-source-git_log-param-cwd*
cwd
	(string)
	DEPRECATED. Use |ddu-source-option-path| instead.

showGraph                                 *ddu-source-git_log-param-showGraph*
	(boolean)
	Draw a text-based graphical representation of the commit history on
	the left hand side of the output.
	NOTE: `git log --graph` of same.

	Default: false

showAll                                     *ddu-source-git_log-param-showAll*
	(boolean)
	Pretend as if all the refs in refs/, along with HEAD, are listed
	on the command line as <commit>.
	NOTE: `git log --all` of same.

	Default: false

showReverse                             *ddu-source-git_log-param-showReverse*
	(boolean)
	Output the commits shown in reverse order.
	`git log --reverse`

	Default: false


commitOrdering                       *ddu-source-git_log-param-commitOrdering*
	(string)
	Specifies the sorting order of commits.
	Check 'Commit Ordering' in `man git-log` for details on the options
	you can specify.

	"date": `git log --date-order`
	"author-date": `git log --author-date-order`
	"topo": `git log --topo-order`

	Default: "topo"

startingCommits                     *ddu-source-git_log-param-startingCommits*
	(string[])
	The array `startingCommits` holds arguments to be directly passed to
	the `git log` command.
	With the array's elements, you can flexibly specify which part of the
	commit history you wish to view and which part to exclude.

	Each element in the array can represent:

	1. A starting point
		This is a commit from which the `git log` command starts to
		traverse the commit history, following parent links to other
		commits.

	2. An exclusion point (prefixed with `^`)
		When a commit is prefixed with `^`, it instructs the `git log`
		command to exclude all commits that are reachable by following
		parent links from that commit.

	3. A range of commits (using the '..' notation)
		For example, `A..B` will show commits reachable from `B`, but
		excluding those reachable from `A`.

	Example:

	If you want to see commits that are in the range between `commitA`
	and `commitB`, but excluding those reachable from `commitC`, the array
	would be: ["commitA..commitB", "^commitC"]

	See `git log --help` for details.

	Default: []

==============================================================================
                           *ddu-kind-git_commit* *ddu-kind-git_commit-actions*
Actions ~

yank
	Yank a hash of the commit to |v:register|.

insert
	Insert a hash of the commit before the cursor.

append
	Insert a hash of the commit after the cursor.

reset
	Reset current HEAD to the specified commit state.

	Parameter:

	hard
		(boolean)
		Resets the index and working tree.

createBranch
	Create new branch with a selected commit as starting-point.

cherryPick
	Apply the selected commits to current working tree by
	`git cherry-pick` .


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
